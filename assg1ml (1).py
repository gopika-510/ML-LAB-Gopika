# -*- coding: utf-8 -*-
"""assg1ML.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1M9pKyfbKng8NRBQ7qy6eVx8eu7PKMEZQ
"""

# NumPy - Array Manipulations
import numpy as np
arr = np.array([[1, 2, 3], [4, 5, 6]])
print("Original Array:", arr)
print("Reshaped Array:", arr.reshape(3, 2))
print("Array Mean:", np.mean(arr))

# Pandas - Data Preprocessing
import pandas as pd
data = {'Name': ['Tom', 'Jerry', 'Mickey'], 'Age': [20, 21, np.nan]}
df = pd.DataFrame(data)
print("DataFrame Head:")
print(df.head())
df['Age'].fillna(df['Age'].mean(), inplace=True)
print("After Handling Missing Value:")
print(df)

# Scipy - Mathematical Computing
from scipy import stats
sample_data = [1, 2, 3, 4, 4, 5, 5, 5, 6]
mode_val = stats.mode(sample_data)
print("Mode:", mode_val)

# Scikit-learn - ML Workflows
from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
scaled_data = scaler.fit_transform([[1, 2], [3, 4], [5, 6]])
print("Standardized Data:", scaled_data)

# Matplotlib - Data Visualization
import matplotlib.pyplot as plt
plt.plot([1, 2, 3, 4], [10, 20, 25, 30])
plt.title("Simple Line Plot")
plt.xlabel("X-axis")
plt.ylabel("Y-axis")
plt.show()

from google.colab import drive
drive.mount('/content/drive')

# Import necessary libraries
import pandas as pd
import numpy as np
from sklearn.datasets import load_iris
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score, confusion_matrix
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.stats import mode

# Load the Iris dataset
iris = load_iris()
X = iris.data
y = iris.target
feature_names = iris.feature_names
target_names = iris.target_names

# Standardize the features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Apply K-Means clustering
kmeans = KMeans(n_clusters=3, random_state=42, n_init=10)
kmeans.fit(X_scaled)
y_kmeans = kmeans.labels_

# Map cluster labels to true labels using majority vote
labels = np.zeros_like(y_kmeans)
for i in range(3):
    mask = (y_kmeans == i)
    labels[mask] = mode(y[mask])[0]

# Evaluate
print("Accuracy (mapped):", accuracy_score(y, labels))
print("Confusion Matrix:\n", confusion_matrix(y, labels))

# Plot clusters using 2 original features (sepal length vs sepal width)
plt.figure(figsize=(8, 6))
sns.scatterplot(
    x=X[:, 0], y=X[:, 1], hue=labels, palette='Set1', s=100
)
plt.title("K-Means Clustering (using Sepal Length & Width)")
plt.xlabel(feature_names[0])  # Sepal length
plt.ylabel(feature_names[1])  # Sepal width
plt.legend(title="Cluster")
plt.grid(True)
plt.show()